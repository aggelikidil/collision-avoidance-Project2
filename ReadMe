Το Automation System (Pub/Sub extension) είναι η εντός σύνδεσης επέκταση της αρχικής εφαρμογής (εκτός σύνδεσης) για την αποφυγή σύγκρουσης μεταξύ δύο τερματικών κινητών συσκευών (Android). Η εφαρμογή Android λειτουργεί με δύο καταστάσεις λειτουργίας (offline και online) και μεταβάλλει την κατάσταση με βάση την κατάσταση συνδεσιμότητας του κινητού τερματικού η εναλλαγή αυτή να γίνεται τόσο αυτόματα όσο και με τη χρήση κουμπιού. Ο χρήστης έχει τη δυνατοτητα να επιλέξει αν η λειτουργία θα  Manual ή Automatic. Σε περίπτωση που επιλεγεί Manual έχει τη δυνατότητα να επιλέξει την κατάσταση σύνδεσης (online/offline) ενώ σε διαφορετική περίπτωση το αντίστοιχο κουμπί δεν είναι διαθέσιμο. Το κουμπί αυτό είναι επίσης λειτουργικό μόνο στην περίπτωση που υπάρχει συνδεσιμότητα στο τερματικό ώστε να είναι εφικτό να αλλάξει την κατάσταση λειτουργίας της εφαρμογής σε “εκτός σύνδεσης”.
//Κατά την αυτόματη αλλαγή θα αλλάζει αυτόματα η κατάσταση του κουμπιού καθώς και θα εμφανίζεται κατάλληλο μήνυμα “toast”.//
...................................................................................................................................................

ΠΡΟΣΘΗΚΕΣ
Το όνομα της συσκευής παράγεται μια φορά, κατά την πρώτη εκτέλεση της εφαρμογής. Η μοναδικότητα του ονόματος επιτυγχάνεται με την παραγωγή μοναδικού αναγνωριστικού μέσω συνάρτησης κατακερματισμου.
-->uniquenumber(package)
Περιέχει τις κλάσεις που παράγουν το μοναδικό αναγνωριστικό.
		-->CreateUniqueNumber
		Αφού ενώσουμε σε μία συμβολοσειρά την MAC address και το ID της συσκευής, τη στέλνουμε σαν όρισμα στην συνάστηση κατακερματισμού. Για 			την δεύτερη συσκευή, λόγω δικαιωμάτων του android 6.0.1, παράγουμε δικό μας αναγνωριστικό (0000000000000000000000000000000).
		-->MD5Hash
		Η συνάρτηση κατακερματισμού.
ΠΗΓΗ: http://stackoverflow.com/questions/4846484/md5-hashing-in-android

Στις ρυθμίσεις της εφαρμογής προστέθηκαν και οι παράμετροι που είναι απαραίτητες για τη σύνδεση με τον MQTT broker (πχ. IP, Port). Οι ρυθμίσεις των
αισθητήρων στην Android εφαρμογή δεν θα λαμβάνονται υπόψιν στην online λειτουργία.

...................................................................................................................................................

Σε κατάσταση λειτουργίας online, η εφαρμογή επεκτάθηκε κατάλληλα ώστε να αποστέλλει σε πραγματικό χρόνο (publish) και κατάλληλο topic το όνομα του
τερματικού, τον τύπο των αισθητήρων, την τρέχουσα μέτρηση των αισθητήρων, την τρέχουσα ημερομηνία και ώρα καθώς και την τρέχουσα τοποθεσία GPS υπό τη μορφή συντεταγμένων σε κεντρικό σύστημα MQTT broker. Ταυτόχρονα εγγράφεται επιτυχώς στον MQTT broker σε κατάλληλο topic για την λήψη ειδοποιήσεων σύγκρουσης (subscribe). Τέλος λαμβάνει επιτυχώς τα κατάλληλα μηνύματα ειδοποίησης σύγκρουσης (receive message) καθώς και// αναπαράγει ήχο και μήνυμα ειδοποίησης. Σημειώνεται ότι το μήνυμα ειδοποίησης πιθανής σύγκρουσης σε offline λειτουργία θα πρέπει να είναι διαφορετικό από το αντίστοιχο μήνυμα σε online λειτουργία. Επίσης σε κατάσταση online λειτουργίας το μήνυμα θα πρέπει να είναι διαφορετικό για απλή πιθανότητα σύγκρουσης και διαφορετικό για επιβεβαιωμένη πιθανότητα σύγκρουσης.//
O MQTT broker βασίζεται στην υλοποίηση του mosquitto και εκτελείται τοπικά στο ίδιο σύστημα με την Java εφαρμογή και τη MySQL βάση δεδομένων.
H Java εφαρμογή λαμβάνει τις τιμές από από τις δύο εφαρμογές Android (subscribe) σε κατάλληλο topic. Υπολογίζει την πιθανότητα σύγκρουσης με βάση τις τιμές των αισθητήρων και τα ορισμένα από τη Java εφαρμογή κατώφλια (Settings tab). Για κάθε πιθανότητα σύγκρουσης που εντοπίζεται αποθηκεύει σε βάση δεδομένων ΜySQL εγγραφή που περιλαμβάνει τα πεδία που έχουν αποσταλεί από το τερματικό και αφορούν την πιθανή σύγκρουση (όνομα του τερματικού, τοποθεσία πιθανής σύγκρουσης υπό τη μορφή συντεταγμένων, τύπο και μέτρηση του αισθητήρα που οδήγησε στον εντοπισμό, ημερομηνία και ώρα ανίχνευσης).
Στη συνέχεια αποστέλλει μήνυμα ειδοποίησης σύγκρουσης (publish) στον MQTT broker με το κατάλληλο topic, //απ’ τον οποίο θα ειδοποιείται αυτόματα μόνο το εμπλεκόμενο με τη σύγκρουση τερματικό.//
Σε περίπτωση που εντοπιστούν δυο πιθανές συγκρούσεις (μια για κάθε τερματικό Android) με χρονική απόσταση όχι μεγαλύτερη του ενός δευτερολέπτου θα θεωρείται επιβεβαιωμένη πιθανότητα σύγκρουσης μεταξύ των δύο τερματικών και μεταβάλλει τις αντίστοιχες δύο εγγραφές της βάσης ως “επιβεβαιωμένες” και  αποστέλλει κατάλληλο μήνυμα ειδοποίησης σύγκρουσης (publish) στον MQTT broker με το κατάλληλο topic, //απ’ τον οποίο θα ειδοποιούνται αυτόματα και τα 2 Android τερματικά.//
Η Java εφαρμογή συνοδεύεται από γραφικό περιβάλλον παρακολούθησης των πιθανών συγκρούσεων βασισμένο σε Java FX. Συγκεκριμένα, περιλαμβάνει 2 οθόνες που
παρουσιάζονται με τη μορφή tab:

1) Η πρώτη οθόνη περιλαμβάνει πολυκριτηριακή αναζήτηση με βάση οποιοδήποτε πεδίο της βάσης (εκτός αυτών των οποίων η τιμή δεν μεταβάλλεται πχ μονάδες μέτρησης), ή συνδυασμό αυτών. Η εφαρμογή επιστρέφει τα αποτελέσματα της αναζήτησης από τη βάση δεδομένων και τα παρουσιάζει σε μορφή λίστας στο γραφικό περιβάλλον. Επιπλέον υπάρχει η δυνατότητα καθαρισμού των πεδίων μέσω του κουμπιού Clear.

2) Η δεύτερη οθόνη περιλαμβάνει τη ρύθμιση των κατωφλιών των αισθητήρων.

Τέλος χρησιμοποιούνται δύο threads στην Java εφαρμογή για την εξυπηρέτηση της λειτουργίας των διαφορετικών tasks. Το main thread αφορά τα γραφικά, ενώ το δευτερεύον τη διαχείρηση ολόκληρης της εφαρμογής από τον administrator (εκτέλεση αλγορίθμων, λήψη μηνυμάτων, αποστολή μηνυμάτων, επικοινωνία με τη βάση δεδομένων κλπ).

Τεχνολογίες συστήματος ανάπτυξης:
1. Java Oracle SE 8 (Java FX included)
2. Android API 4.2.2 και 6.0.1
3. Android Studio (Εργαλείο ανάπτυξης της Android εφαρμογής)
4. IntelliJ IDEA (Εργαλείο ανάπτυξης της Java εφαρμογής)
4. MQTT mosquitto broker
5. Eclipse Paho (Java & Android MQTT client)
6. MySQL Community server
7. JDBC
...................................................................................................................................................



ΑΝΑΛΥΣΗ ΚΩΔΙΚΑ
....................................................................................................................................................

-->administratorcontroller(package): στο πακέτο αυτό διαχειριζόμαστε:
   -->AdminController: η κλάση αυτή αποτελεί το δευτερεύον thread της εφαρμογής Java, το οποίο διαχειρίζεται την εκτέλεση λγορίθμων, την λήψη και   αποστολή μηνυμάτων, την επικοινώνια με τη βάση δεδομένων κλπ, όπως αναφέρθηκε παραπάνω.
Αρχικά, αποκτάμε πρόσβαση στη διαμoιραζόμενη μνήμη, καθώς και στον MQTT server. Στη συνέχεια, γίνεται subscribe στα 2 topic(2 τερματικά).
Όσο το νήμα δεν διακόπτεται, παραμένει αδρανές μέχρι να διακοπεί. Τέλος, μετά την διακοπή του κάνει unsubscribe.
   -->MosquitoControllerTerminal: η κλάση αυτή διαχειρίζεται τα μηνύματα που στέλνονται από τον MQTT server. Μέσω της συνάρτησης PublishToTerminals, αποστέλλεται κατάλληλο μήνυμα ειδοποίησης σύγκρουσης (publish) στον MQTT broker με το κατάλληλο topic(result), στο οποίο έχουν πρόσβαση και τα 2 τερματικά. Η συνάρτηση MessageArrived καλείται αυτόματα κάθε φορά που λαμβάνεται μήνυμα. Το μήνυμα διαχωρίζεται στα κατάλληλα πεδία και αφού γίνει ο έλεγχος σύγκρουσης με τα αντίστοιχα κατώφλια, τα στοιχεία του μηνύματος εισάγονται στη βάση δεδομένων αν και εφόσον ξεπεραστούν. Επίσης, στέλνεται κατάλληλο μήνυμα ειδοποίησης στα αντίστοιχα topic- τερματικά.




















